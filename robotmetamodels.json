{
    "@context": {
        "schema": "http://schema.org/"
    },
    "@id": "RobotMetaModels",
    "@graph": [
        {
            "@id": "StructureMetaModels",
            "@graph": [
                {
                    "@id": "Drawer",
                    "description": "A structure that is used for storage and is access controlled.",
                    "subclass": [],
                    "superclass": [],
                    "required": [
                        "parts.contains(Access_Control_Structure) && parts.contains(User_Input_device)"
                    ]
                },
                {
                    "@id": "Access_Control_Structure",
                    "description": "A structure that controls access to a particular storage structure.",
                    "locked": "bool",
                    "subclass": [],
                    "superclass": [],
                    "required": [
                        "locked == true || locked == false"
                    ]
                },
                {
                    "@id": "User_Input_Device",
                    "description": "A structure that allows the user to provide input",
                    "subclass": [
                        {
                            "@id": "Biometric_Security_Feature"
                        },
                        {
                            "@id": "Non_Biometric_Security_Feature"
                        }
                    ],
                    "superclass": [],
                    "required": []
                },
                {
                    "@id": "Biometric_Security_Feature",
                    "description": "A user input device which provides access based on biometric input.",
                    "@value": {
                        "@id": "User's Fingerprint",
                        "fingerprint": "<data>"
                    },
                    "subclass": [],
                    "superclass": [
                        {
                            "@id": "User_Input_Device"
                        }
                    ],
                    "required": [
                        "designatedLock",
                        "User's Fingerprint",
                        "check"
                    ]
                },
                {
                    "@id": "Non_Biometric_Security_Feature",
                    "description": "A structure that provides access based on non biometric values",
                    "subclass": [],
                    "superclass": [
                        {
                            "@id": "User_Input_Device"
                        }
                    ],
                    "required": [
                        "designatedLock",
                        "Actual Pin",
                        "Entered Pin",
                        "check"
                    ]
                },
                {
                    "@id": "Network_Communication_Module",
                    "description": "A structure that communicates with the network",
                    "subclass": [],
                    "superclass": [],
                    "required": [
                        "accessible_data"
                    ]
                },
                {
                    "@id": "Processing_Module",
                    "description": "A module capable of processing and transferring data to different parts of the robot",
                    "subclass": [],
                    "superclass": [],
                    "required": []
                },
                {
                    "@id": "Sensory_Device",
                    "description": "A device capable of capturing environment data.",
                    "subclass": [],
                    "superclass": [],
                    "required": [ "if x is sensory_device: x.hasa(dataProcessingModule)"]
                },
                {
                    "@id": "Motion_Parts",
                    "description": "Parts required to move",
                    "subclass": [],
                    "superclass": [],
                    "required": []
                },
                {
                    "@id": "Basic_Mechanical_Parts",
                    "description": "Parts that form the core of the mechanical abilities of the robot (Motors, Wheels, Levers etc.)",
                    "subclass": [],
                    "superclass": [],
                    "required": []
                },
                {
                    "@id": "Motion_Controller",
                    "description": "This module controls the real-time mechanical motion in the robot",
                    "subclass": [],
                    "superclass": [],
                    "required": [
                        "direction",
                        "distance",
                        "orientation"
                    ]
                },
                {
                    "@id": "Button",
                    "description": "A physical button on the robot that initiates a predefined action",
                    "subclass": [],
                    "superclass": [],
                    "required": [
                        "action"
                    ]
                }
            ]
        },
        {
            "@id": "ValueMetaModels",
            "@graph": [
                {
                    "@id": "Position",
                    "description": "The position of the object / robot of interest",
                    "subclass": [],
                    "superclass": [],
                    "required": []
                },
                {
                    "@id": "Planar_Position",
                    "description": "The planar position of the object / robot of interest",
                    "subclass": [],
                    "superclass": [],
                    "required": [
                    ] 
                },
                {
                    "@id": "Path",
                    "description": "The path that needs to be taken to reach the destination",
                    "subclass": [],
                    "superclass": [],
                    "required": []
                },
                {
                    "@id": "Task",
                    "description": "This is what the robot has to do.",
                    "subclass": [],
                    "superclass": [],
                    "required": "taskId.isnotEmpty() && taskDescription.isnotEmpty()"
                    
                }
            ]
        },
        {
            "@id": "ActionMetaModels",
            "@graph": [
                {
                    "@id": "Unlock_Drawer",
                    "description": "Unlocks the target drawer",
                    "precondition": "targetDrawer().parts().check() == true && targetDrawer().parts().locked() == true",
                    "postcondition": "targetDrawer().parts().check() == false && targetDrawer().parts().locked() == false",
                    "score": 2
                },
                {
                    "@id": "Elevator_Communication",
                    "description": "Communicates with the elevator through the network. Response is recived only when the requested task has been successfully completed by the elevator.",
                    "agent": "r",
                    "elevator": "e",
                    "precondition": [
                        {
                            "condition": "r.Current_Postition == e.accessPosition || r.Current_Position == e.inPosition "
                        },
                        {
                            "condition": "r.has-a(Network_Communication_Module)"
                        }
                    ],
                    "postcondition": "r.Current_Position == e.inPosition || r.Current_Position.y == Delivery_Location.value.y",
                    "score": 4
                },
                {
                    "@id": "Task_Communication",
                    "description": "Communicate with the network to obtain tasks/update task status. This being a monitoring task has no score.",
                    "agent": "r"
                },
                {
                    "@id": "Motion",
                    "description": "The robot moves.",
                    "agent": "r",
                    "precondition": [
                        {
                            "condition": "r.has-a(motion_Parts)"
                        },
                        {
                            "condition": "r.has-a(motion_Controller)"
                        },
                        {
                            "condition": "r.Motion.distance != 0 || r.Motion.angle != 0 "
                        }
                    ],
                    "postcondition": "r.Motion.distance == 0 && r.Motion.angle == 0",
                    "score": 8
                }
            ]
        },
        {
            "@id": "GoalAction Meta Models",
            "@graph": [
                {
                    "@id": "Goal",
                    "description": "description",
                    "desired result": "result",
                    "action plan": "plan",
                    "required": [
                        "descr",
                        "res",
                        "tp"
                    ]
                },
                {
                    "@id": "ActionPlan",
                    "description": " A plan of actions to follow",
                    "action plan": "plan",
                    "required": [
                        "plan"
                    ]
                }
            ]
        }
    ]
}
